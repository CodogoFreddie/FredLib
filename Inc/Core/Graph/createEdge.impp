template <bool directed, class EdgeIDM, class NodeIDM>
ID Graph<directed, EdgeIDM, NodeIDM>::createEdge(const ID from, const ID to){
	const ID id = eIDM.vend();
	const auto nodes = std::pair<ID, ID>(from, to);

	assert(edgeListByNodes.find(nodes) == edgeListByNodes.end());

	edgeListByEdge[id] = nodes;
	edgeListByNodes[nodes] = id;

	const auto insertAtFrom = std::lower_bound (edgeIDsOrderedByFromNode.begin(), edgeIDsOrderedByFromNode.end(), id,
		[&](auto lhs, auto rhs){
			return edgeListByEdge[lhs].first < edgeListByEdge[rhs].first;
		}
	);
	edgeIDsOrderedByFromNode.insert(insertAtFrom, id);

	const auto insertAtTo = std::lower_bound (edgeIDsOrderedByToNode.begin(), edgeIDsOrderedByToNode.end(), id,
		[&](auto lhs, auto rhs){
			return edgeListByEdge[lhs].second < edgeListByEdge[rhs].second;
		}
	);
	edgeIDsOrderedByToNode.insert(insertAtTo, id);

	return id;
}
